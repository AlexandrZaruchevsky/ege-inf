# Импортируем модуль для работы с регулярными выражениями
import re
# Пишем регулярное выражение для шаблона ?136*1, где ? - нечетная цифра * - чётное число.
# В регулярном выражении [13579] - любая нечётная цифра, \d* - любая числовая последовательность
# или пустая последовательность (либо ничего, либо любое количество цифр).
# Для условий нашей задачи регулярное выражение должно начинаться с ^, что означает начало строки
# и заканчиваться $ - означает конец строки. Иначе (если не будет ^ и $) могут быть отобраны цифры
# в состав которых входит последовательность, удовлетворяющая нашему регулярному выражению
pattern = re.compile(r'^[13579]136\d*1$')
# Генерируем список натуральных чисел, делящихся на 11071, выбирая для этого диапазон от 11071
# до 10**10 с шагом 11071 и проверяя на соответствие регулярному выражению
li11071 = [x for x in range(11071, 10 ** 10, 11071) if pattern.match(str(x))]
# Генерируем список на основе списка li11071, оставляя только те, в которых последовательность \d*
# чётная. Последовательность начинается с пятого символа(соответствует индексу 4), не включает последний
# символ
lst = [x for x in li11071 if int(str(x)[4:-1]) % 2 == 0]
# Сортируем по убыванию
lst.sort(reverse=True)
# Выводим в консоль первые пять цифр ([:5]) отсортированные по возрастанию ([::-1], т.к. было отсортировано
# по убыванию)
for x in lst[:5][::-1]:
  print(x, x // 11071)

# Формирование списка в одну строку
# li11071 = [x for x in range(11071, 10 ** 10, 11071) if pattern.match(str(x)) is not None and int(str(x)[4:-1]) % 2 == 0]
# li11071.sort(reverse=True)
# for x in li11071[:5][::-1]:
#   print(x, x // 11071)